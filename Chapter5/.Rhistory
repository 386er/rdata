library('arules')
library('arulesViz')
install.packages('arules')
install.packages('arulesViz')
library('arules')
library('arulesViz')
data(Groceries)
Groceries
summary(Groceries)
class(Groceries)
Groceries@itemInfo[1:20,]
apply(Groceries@data[,10:20], 2,
function(r) paste(Groceries@itemInfo[r,"labels"], collapse=", ")
)
itemsets <- apriori(Groceries, parameter=list(minlen=1, maxlen=1, support=0.02, target="frequent itemsets"))
summary(itemsets)
inspect(head(sort(itemsets, by = "support"), 10))
itemsets <- apriori(Groceries, parameter=list(minlen=2, maxlen=2, support=0.02, target="frequent itemsets"))
summary(itemsets)
inspect(head(sort(itemsets, by ="support"),10))
itemsets <- apriori(Groceries, parameter=list(minlen=3, maxlen=3, support=0.02, target="frequent itemsets"))
inspect(sort(itemsets, by ="support"))
itemsets <- apriori(Groceries, parameter=list(minlen=4, maxlen=4, support=0.02, target="frequent itemsets"))
inspect(sort(itemsets, by ="support"))
itemsets <- apriori(Groceries, parameter=list(minlen=1, support=0.02,
target="frequent itemsets"))
rules <- apriori(Groceries, parameter=list(support=0.001,
confidence=0.6, target = "rules"))
summary(rules)
plot(rules)
plot(rules@quality)
inspect(head(sort(rules, by="lift"), 10))
confidentRules <- rules[quality(rules)$confidence > 0.9]
confidentRules
plot(confidentRules, method="matrix", measure=c("lift", "confidence"),
control=list(reorder=TRUE))
highLiftRules <- head(sort(rules, by="lift"), 5)
plot(highLiftRules, method="graph", control=list(type="items"))
# Example in R
income_input = as.data.frame(  read.csv("d:/bigdata/Chapter6/income.csv")   )
income_input[1:10,]
summary(income_input)
library(lattice)
splom(~income_input[c(2:5)],  groups=NULL, data=income_input,
axis.line.tck = 0,
axis.text.alpha = 0)
results <- lm(Income~Age + Education + Gender, income_input)
summary(results)
results2 <- lm(Income ~ Age + Education, income_input)
summary(results2)
confint(results2, level = .95)
# compute a confidence interval on the expected income of a person
Age <- 41
Education <- 12
new_pt <- data.frame(Age, Education)
conf_int_pt <- predict(results2, new_pt, level=.95, interval="confidence")
conf_int_pt
# compute a prediction interval on the income of the same person
pred_int_pt <- predict(results2, new_pt, level=.95, interval="prediction")
pred_int_pt
ith(results2, {
plot(fitted.values, residuals,ylim=c(-40,40) )
points(c(min(fitted.values),max(fitted.values)), c(0,0), type = "l")})
hist(results2$residuals, main="")
qqnorm(results2$residuals, ylab="Residuals", main="")
qqline(results2$residuals)
#install.packages('arules')
#install.packages('arulesViz')
library('arules')
library('arulesViz')
##########################################
# section 5.5.1 The Groceries Dataset
##########################################
data(Groceries)
Groceries
summary(Groceries)
class(Groceries)
Groceries@itemInfo[1:20,]
apply(Groceries@data[,10:20], 2,
function(r) paste(Groceries@itemInfo[r,"labels"], collapse=", ")
)
# frequent 1-itemsets
itemsets <- apriori(Groceries, parameter=list(minlen=1, maxlen=1, support=0.02, target="frequent itemsets"))
summary(itemsets)
inspect(head(sort(itemsets, by = "support"), 10))
# frequent 2-itemsets
itemsets <- apriori(Groceries, parameter=list(minlen=2, maxlen=2, support=0.02, target="frequent itemsets"))
summary(itemsets)
inspect(head(sort(itemsets, by ="support"),10))
# frequent 3-itemsets
itemsets <- apriori(Groceries, parameter=list(minlen=3, maxlen=3, support=0.02, target="frequent itemsets"))
inspect(sort(itemsets, by ="support"))
# frequent 4-itemsets
itemsets <- apriori(Groceries, parameter=list(minlen=4, maxlen=4, support=0.02, target="frequent itemsets"))
inspect(sort(itemsets, by ="support"))
# run Apriori without setting the maxlen parameter
itemsets <- apriori(Groceries, parameter=list(minlen=1, support=0.02,
target="frequent itemsets"))
rules <- apriori(Groceries, parameter=list(support=0.001,
confidence=0.6, target = "rules"))
summary(rules)
plot(rules)
plot(rules@quality)
# displays rules with top lift scores
inspect(head(sort(rules, by="lift"), 10))
confidentRules <- rules[quality(rules)$confidence > 0.9]
confidentRules
plot(confidentRules, method="matrix", measure=c("lift", "confidence"),
control=list(reorder=TRUE))
# select the 5 rules with the highest lift
highLiftRules <- head(sort(rules, by="lift"), 5)
plot(highLiftRules, method="graph", control=list(type="items"))
